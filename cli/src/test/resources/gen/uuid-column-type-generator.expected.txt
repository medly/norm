package com.foo

import java.sql.PreparedStatement
import java.sql.ResultSet
import java.time.OffsetDateTime
import java.util.UUID
import kotlin.String
import kotlin.Unit
import norm.ParamSetter
import norm.Query
import norm.RowMapper

public class FooParams

public class FooParamSetter : ParamSetter<FooParams> {
  public override fun map(ps: PreparedStatement, params: FooParams): Unit {
  }
}

public data class FooResult(
  public val id: UUID,
  public val columnName: String?,
  public val oldValue: String?,
  public val newValue: String?,
  public val capturedAt: OffsetDateTime?
)

public class FooRowMapper : RowMapper<FooResult> {
  public override fun map(rs: ResultSet): FooResult = FooResult(
  id = rs.getObject("id") as java.util.UUID,
    columnName = rs.getObject("column_name") as kotlin.String?,
    oldValue = rs.getObject("old_value") as kotlin.String?,
    newValue = rs.getObject("new_value") as kotlin.String?,
    capturedAt = rs.getObject("captured_at") as java.time.OffsetDateTime?)
}

public class FooQuery : Query<FooParams, FooResult> {
  public override val sql: String = "SELECT * FROM logs"

  public override val mapper: RowMapper<FooResult> = FooRowMapper()

  public override val paramSetter: ParamSetter<FooParams> = FooParamSetter()
}
