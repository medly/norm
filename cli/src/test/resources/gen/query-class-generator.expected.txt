package com.foo

import java.sql.PreparedStatement
import java.sql.ResultSet
import kotlin.Int
import kotlin.String
import kotlin.Unit
import norm.ParamSetter
import norm.Query
import norm.RowMapper

public data class FooParams(
  public val name: String?,
  public val `field`: String?
)

public class FooParamSetter : ParamSetter<FooParams> {
  public override fun map(ps: PreparedStatement, params: FooParams): Unit {
    ps.setObject(1, params.name)
    ps.setObject(2, params.field)
  }
}

public data class FooResult(
  public val id: Int,
  public val firstName: String?,
  public val lastName: String?
)

public class FooRowMapper : RowMapper<FooResult> {
  public override fun map(rs: ResultSet): FooResult = FooResult(
  id = rs.getObject("id") as kotlin.Int,
    firstName = rs.getObject("first_name") as kotlin.String?,
    lastName = rs.getObject("last_name") as kotlin.String?)
}

public class FooQuery : Query<FooParams, FooResult> {
  public override val sql: String = "select * from employees where first_name = ? order by ?"

  public override val mapper: RowMapper<FooResult> = FooRowMapper()

  public override val paramSetter: ParamSetter<FooParams> = FooParamSetter()
}
