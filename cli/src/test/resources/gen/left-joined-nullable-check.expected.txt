package com.foo

import java.sql.PreparedStatement
import java.sql.ResultSet
import kotlin.Array
import kotlin.Int
import kotlin.String
import kotlin.Unit
import norm.ParamSetter
import norm.Query
import norm.RowMapper

public class FooParams

public class FooParamSetter : ParamSetter<FooParams> {
  public override fun map(ps: PreparedStatement, params: FooParams): Unit {
  }
}

public data class FooResult(
  public val id: Int,
  public val firstName: String?,
  public val lastName: String?,
  public val departmentId: Int?,
  public val name: String?,
  public val combinationsId: Int?,
  public val colors: Array<String>?
)

public class FooRowMapper : RowMapper<FooResult> {
  public override fun map(rs: ResultSet): FooResult = FooResult(
  id = rs.getObject("id") as kotlin.Int,
    firstName = rs.getObject("first_name") as kotlin.String?,
    lastName = rs.getObject("last_name") as kotlin.String?,
    departmentId = rs.getObject("department_id") as kotlin.Int?,
    name = rs.getObject("name") as kotlin.String?,
    combinationsId = rs.getObject("combinations_id") as kotlin.Int?,
    colors = rs.getArray("colors").array as kotlin.Array<kotlin.String>?)
}

public class FooQuery : Query<FooParams, FooResult> {
  public override val sql: String = """
      |select e.*, d.id as department_id, d.name, c.id as combinations_id, c.colors
      |from employees e
      |left join departments d on e.id = d.id
      |left join combinations c on c.id = d.id
      """.trimMargin()

  public override val mapper: RowMapper<FooResult> = FooRowMapper()

  public override val paramSetter: ParamSetter<FooParams> = FooParamSetter()
}
